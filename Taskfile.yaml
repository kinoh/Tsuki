version: '3'

dotenv: ['.env', '.env.local']

env:
  GIT_HASH:
    sh: git rev-parse HEAD

tasks:
  deploy:
    desc: Deploy to production
    cmds:
      - docker compose up --build --detach
  deploy-core:
    desc: Deploy core service
    cmds:
      - docker compose up core --build --detach
  up:
    desc: Start production
    cmds:
      - docker compose up --detach --remove-orphans
  down:
    desc: Stop production
    cmds:
      - docker compose down
  restart:
    desc: Restart in production
    cmds:
      - docker compose restart
  wait:
    desc: Wait for core service health
    cmds:
      - |
        until [ "$(docker compose ps --format json | jq -r .Health)" == "healthy" ]; do
          echo "waiting for core service to be healthy..."
          sleep 5
        done
      - echo "Core service is healthy!"
  ps:
    desc: Do ps in production
    cmds:
      - docker compose ps
  build:
    desc: Do build in production
    cmds:
      - docker compose build
  build-*:
    desc: Do build in production
    vars:
      SERVICE: '{{index .MATCH 0}}'
    cmds:
      - docker compose build {{.SERVICE}}
  log-*:
    desc: Show log in production
    vars:
      SERVICE: '{{index .MATCH 0}}'
    cmds:
      - docker compose logs --tail=100 {{.SERVICE}}
  download_model:
    desc: Download Vosk model
    cmds:
      - curl -sSfL -o /tmp/vosk-model-ja.zip https://alphacephei.com/vosk/models/vosk-model-ja-0.22.zip
      - unzip /tmp/vosk-model-ja.zip -d /var/vosk/
      - rm /tmp/vosk-model-ja.zip
  decrypt_prompt:
    desc: Decrypt prompt file
    cmds:
      - cd core && node --env-file .env scripts/decrypt_prompt.js
  encrypt_prompt:
    desc: Encrypt prompt file
    cmds:
      - cd core && node --env-file .env scripts/encrypt_prompt.js
  mcp/build:
    desc: Build all MCP servers
    deps:
      - mcp/build-structured-memory
      - mcp/build-scheduler
  mcp/build-*:
    desc: Build a MCP server
    vars:
      NAME: '{{index .MATCH 0}}'
    cmds:
      - mkdir -p core/bin
      - cd mcp/{{.NAME}} && cargo build --release
      - cp mcp/{{.NAME}}/target/release/{{.NAME}} core/bin/
  setup:
    desc: Setup development environment
    cmds:
      - cd core && pnpm install
      - task: mcp/build
